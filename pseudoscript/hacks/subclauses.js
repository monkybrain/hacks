// Generated by CoffeeScript 1.10.0
(function() {
  var Arithmetic, Modify, add, d, fs, light, lines, multiply, present, readline, set, tree, type, unset;

  fs = require("fs");

  readline = require("linebyline");

  type = function(object) {
    if (typeof object === 'boolean') {
      return 'absolute';
    }
    if (typeof object === 'number') {
      return 'relative';
    }
  };

  Arithmetic = (function() {
    function Arithmetic() {}

    Arithmetic.add = function(a, b) {
      return a + b;
    };

    return Arithmetic;

  })();

  multiply = function(a, b) {
    return a * b;
  };

  add = function(a, b) {
    return a + b;
  };

  set = function(object, property, value) {
    if (typeof value === typeof object.properties[property]) {
      return object.properties[property] = value;
    } else {
      return console.error("Error! Property '" + property + "' of '" + object.name + "' is " + (type(object.properties[property])) + ", not " + (type(value)));
    }
  };

  unset = function(object, property, value) {
    return object[property] = value;
  };

  present = function(information) {
    return console.log(information);
  };

  Modify = (function() {
    function Modify() {}

    Modify.match = function(object, property, value) {
      return typeof value === typeof object.properties[property];
    };

    Modify.error = function(object, property, value) {
      return console.error("Error! Property '" + property + "' of '" + object.name + "' is " + (type(object.properties[property])) + ", not " + (type(value)));
    };

    Modify.set = function(object, property, value) {
      if (this.match(object, property, value)) {
        return object.properties[property] = value;
      } else {
        return this.error(object, property, value);
      }
    };

    return Modify;

  })();

  tree = {
    length: 3.5,
    age: 43
  };

  present(Arithmetic.add(multiply(tree.length, 3), 4));

  light = {
    name: 'light',
    properties: {
      'on': false,
      'brightness': 20
    }
  };


  /*
  console.log "Before:"
  console.log light
   */

  Modify.set(light, 'on', true);

  Modify.set(light, 'brightness', 45);

  present(light);

  Modify.set(light, 'brightness', false);

  d = {
    "Modify.set": "turn on"
  };

  lines = readline('sub.pseudo');

  lines.on('line', function(line) {
    var subclauses;
    subclauses = line.split(',');
    return present(subclauses);
  });

}).call(this);
