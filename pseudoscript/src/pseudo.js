// Generated by CoffeeScript 1.10.0
(function() {
  var Parser, args, d, filename, fs, parser, readline, sv, yargs,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  yargs = require("yargs");

  readline = require("linebyline");

  fs = require("fs");

  sv = {
    "for ": "för varje ",
    "in ": "i ",
    "console.log ": ["visa ", "skriv ut ", "meddela "],
    "er.": "ret är ",
    ".": ["en är ", "et är ", "ens ", "ets ", "'s "],
    "if": "^om",
    " if": " om",
    "  if": "  om",
    "else": "annars",
    "''": "ingenting",
    "console.log('')": "<tom rad>",
    "": ["resultatet av att", "vem som", "denna"],
    "true": "ja",
    "false": "nej",
    "then ": "så ",
    ">": "överstiger",
    "<": "understiger",
    "return": "svara med",
    "begränsa": {
      pre: "begränsa",
      post: "till"
    },
    "*": "multiplicerat med",
    "+": "plus",
    "2": "två",
    "3": "tre",
    "and": "och"
  };

  d = {
    "for": "for every",
    "lake": "the lake",
    "console.log": "show me"
  };

  args = yargs.argv._;

  filename = yargs.argv._[0];

  if (filename === void 0) {
    filename = 'test/raw.pseudo';
  }

  Parser = (function() {
    function Parser(filename, dictionary) {
      this.apply = bind(this.apply, this);
      this.print = bind(this.print, this);
      this.join = bind(this.join, this);
      this.strip = bind(this.strip, this);
      this.process = bind(this.process, this);
      this.replace = bind(this.replace, this);
      this.filename = filename != null ? filename : null;
      this.dictionary = dictionary != null ? dictionary : null;
      this.parsed = [];
    }

    Parser.prototype.replace = function(line, target, source, post) {
      if (post != null) {
        line = line.replace(post, ', ');
      }
      source = new RegExp("" + source, 'g');
      target = "" + target;
      return line.replace(source, target);
    };

    Parser.prototype.process = function(line) {
      var i, len, ref, source, synonym, target;
      ref = this.dictionary;
      for (target in ref) {
        source = ref[target];
        if (typeof source === 'string') {
          line = this.replace(line, target, source);
        }
        if (typeof source === 'object') {
          if (source instanceof Array) {
            for (i = 0, len = source.length; i < len; i++) {
              synonym = source[i];
              line = this.replace(line, target, synonym);
            }
          } else {
            line = this.replace(line, target, source.pre, source.post);
          }
        }
      }
      return this.parsed.push(line);
    };

    Parser.prototype.strip = function() {
      return this.filename.slice(0, this.filename.lastIndexOf('.'));
    };

    Parser.prototype.join = function() {
      return this.parsed.join("\n") + "\n";
    };

    Parser.prototype.print = function() {
      return console.log(this.filename);
    };

    Parser.prototype.apply = function(filename, dictionary) {
      var error, error1, lines;
      if (filename != null) {
        this.filename = filename;
      }
      if (dictionary != null) {
        this.dictionary = dictionary;
      }

      /*if not @filename
        throw new Error 'Filename required'
      if not @dictionary
        throw new Error 'Dictionary required'
       */
      try {
        lines = readline(filename);
      } catch (error1) {
        error = error1;
        console.error(error);
      }
      lines.on('line', (function(_this) {
        return function(line) {
          return _this.process(line);
        };
      })(this));
      return lines.on('end', (function(_this) {
        return function() {
          var data;
          data = "# Generated CoffeeScript from PseudoScript\n\n";
          data += _this.join();
          return fs.writeFile(_this.strip() + '.coffee', _this.join());
        };
      })(this));
    };

    return Parser;

  })();

  parser = new Parser;

  parser.apply(filename, sv);

}).call(this);
